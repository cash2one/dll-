#include "LOLHeroDef.h"
//extern LOLHERO stLOLHeroData[];

LOLRANK stLOLRankData[]=
{
	"CHALLENGER","王者",
	"DIAMOND","钻石",
	"PLATINUM","铂金",
	"GOLD","黄金",
	"SILVER","白银",
	"BRONZE","青铜",
	"",""
};

LOLHERO stLOLHeroData[]={
	"Aatrox","暗裔剑魔","亚托克斯", 	HERO_AATROX,
	"Ahri","九尾妖狐","阿狸", 	HERO_AHRI,
	"Akali","暗影之拳","阿卡丽", 	HERO_AKALI,
	"Alistar","牛头酋长","阿利斯塔", 	HERO_ALISTAR,
	"Amumu","殇之木乃伊","阿木木", 	HERO_AMUMU,
	"Anivia","冰晶凤凰","艾尼维亚", 	HERO_ANIVIA,
	"Annie","黑暗之女","安妮", 	HERO_ANNIE,
	"Ashe","寒冰射手","艾希", 	HERO_ASHE,
	"Azir","沙漠皇帝","阿兹尔", 	HERO_AZIR,
	"Blitzcrank","蒸汽机器人","布里茨", 	HERO_BLITZCRANK,
	"Brand","复仇焰魂","布兰德", 	HERO_BRAND,
	"Braum","弗雷尔卓德之心","布隆", 	HERO_BRAUM,
	"Caitlyn","皮城女警","凯特琳", 	HERO_CAITLYN,
	"Cassiopeia","魔蛇之拥","卡西奥佩娅", 	HERO_CASSIOPEIA,
	"Chogath","虚空恐惧","科加斯", 	HERO_CHOGATH,
	"Corki","英勇投弹手","库奇", 	HERO_CORKI,
	"Darius","诺克萨斯之手","德莱厄斯", 	HERO_DARIUS,
	"Diana","皎月女神","黛安娜", 	HERO_DIANA,
	"Draven","荣耀行刑官","德莱文", 	HERO_DRAVEN,
	"DrMundo","祖安狂人","蒙多", 	HERO_DRMUNDO,
	"Elise","蜘蛛女皇","伊莉丝", 	HERO_ELISE,
	"Evelynn","寡妇制造者","伊芙琳", 	HERO_EVELYNN,
	"Ezreal","探险家","伊泽瑞尔", 	HERO_EZREAL,
	"FiddleSticks","末日使者","费德提克", 	HERO_FIDDLESTICKS,
	"Fiora","无双剑姬","菲奥娜", 	HERO_FIORA,
	"Fizz","潮汐海灵","菲兹", 	HERO_FIZZ,
	"Galio","哨兵之殇","加里奥", 	HERO_GALIO,
	"Gangplank","海洋之灾","普朗克", 	HERO_GANGPLANK,
	"Garen","德玛西亚之力","盖伦", 	HERO_GAREN,
	"Gnar","迷失之牙","纳尔", 	HERO_GNAR,
	"Gragas","酒桶","古拉加斯", 	HERO_GRAGAS,
	"Graves","法外狂徒","格雷福斯", 	HERO_GRAVES,
	"Hecarim","战争之影","赫卡里姆", 	HERO_HECARIM,
	"Heimerdinger","大发明家","黑默丁格", 	HERO_HEIMERDINGER,
	"Irelia","刀锋意志","艾瑞莉亚", 	HERO_IRELIA,
	"Janna","风暴之怒","迦娜", 	HERO_JANNA,
	"JarvanIV","德玛西亚皇子","嘉文四世", 	HERO_JARVANIV,
	"Jax","武器大师","贾克斯", 	HERO_JAX,
	"Jayce","未来守护者","杰斯", 	HERO_JAYCE,
	"Jinx","暴走萝莉","金克丝", 	HERO_JINX,
	"Karma","天启者","卡尔玛", 	HERO_KARMA,
	"Karthus","死亡颂唱者","卡尔萨斯", 	HERO_KARTHUS,
	"Kassadin","虚空行者","卡萨丁", 	HERO_KASSADIN,
	"Katarina","不祥之刃","卡特琳娜", 	HERO_KATARINA,
	"Kayle","审判天使","凯尔", 	HERO_KAYLE,
	"Kennen","狂暴之心","凯南", 	HERO_KENNEN,
	"Khazix","虚空掠夺者","卡兹克", 	HERO_KHAZIX,
	"KogMaw","深渊巨口","克格莫", 	HERO_KOGMAW,
	"Leblanc","诡术妖姬","乐芙兰", 	HERO_LEBLANC,
	"LeeSin","盲僧","李青", 	HERO_LEESIN,
	"Leona","曙光女神","蕾欧娜", 	HERO_LEONA,
	"Lissandra","冰霜女巫丽","桑卓", 	HERO_LISSANDRA,
	"Lucian","圣枪游侠","卢锡安", 	HERO_LUCIAN,
	"Lulu","仙灵女巫","璐璐", 	HERO_LULU,
	"Lux","光辉女郎","拉克丝", 	HERO_LUX,
	"Malphite","熔岩巨兽","墨菲特", 	HERO_MALPHITE,
	"Malzahar","虚空先知","玛尔扎哈", 	HERO_MALZAHAR,
	"Maokai","扭曲树精","茂凯", 	HERO_MAOKAI,
	"MasterYi","无极剑圣","易", 	HERO_MASTERYI,
	"MissFortune","赏金猎人","厄运小姐", 	HERO_MISSFORTUNE,
	"MonkeyKing","齐天大圣","孙悟空", 	HERO_MONKEYKING,
	"Mordekaiser","金属大师","莫德凯撒", 	HERO_MORDEKAISER,
	"Morgana","堕落天使","莫甘娜", 	HERO_MORGANA,
	"Nami","唤潮鲛姬","娜美", 	HERO_NAMI,
	"Nasus","沙漠死神","内瑟斯", 	HERO_NASUS,
	"Nautilus","深海泰坦","诺提勒斯", 	HERO_NAUTILUS,
	"Nidalee","狂野女猎手","奈德丽", 	HERO_NIDALEE,
	"Nocturne","永恒梦魇","魔腾", 	HERO_NOCTURNE,
	"Nunu","雪人骑士","努努", 	HERO_NUNU,
	"Olaf","狂战士","奥拉夫", 	HERO_OLAF,
	"Orianna","发条魔灵","奥利安娜", 	HERO_ORIANNA,
	"Pantheon","战争之王","潘森", 	HERO_PANTHEON,
	"Poppy","钢铁大使","波比", 	HERO_POPPY,
	"Quinn","德玛西亚之翼","奎因", 	HERO_QUINN,
	"Rammus","披甲龙龟","拉莫斯", 	HERO_RAMMUS,
	"Renekton","荒漠屠夫","雷克顿", 	HERO_RENEKTON,
	"Rengar","傲之追猎者","雷恩加尔", 	HERO_RENGAR,
	"Riven","疾风之刃","瑞雯", 	HERO_RIVEN,
	"Rumble","机械公敌","兰博", 	HERO_RUMBLE,
	"Ryze","流浪法师","瑞兹", 	HERO_RYZE,
	"Sejuani","凛冬之怒","瑟庄妮", 	HERO_SEJUANI,
	"Shaco","恶魔小丑","萨科", 	HERO_SHACO,
	"Shen","暮光之眼","慎", 	HERO_SHEN,
	"Shyvana","龙血武姬","希瓦娜", 	HERO_SHYVANA,
	"Singed","炼金术士","辛吉德", 	HERO_SINGED,
	"Sion","亡灵勇士","塞恩", 	HERO_SION,
	"Sivir","战争女神","希维尔", 	HERO_SIVIR,
	"Skarner","水晶先锋","斯卡纳", 	HERO_SKARNER,
	"Sona","琴瑟仙女","莎娜", 	HERO_SONA,
	"Soraka","众星之子","索拉卡", 	HERO_SORAKA,
	"Swain","策士统领","斯维因", 	HERO_SWAIN,
	"Syndra","暗黑元首","辛德拉", 	HERO_SYNDRA,
	"Talon","刀锋之影","泰隆", 	HERO_TALON,
	"Taric","宝石骑士","塔里克", 	HERO_TARIC,
	"Teemo","迅捷斥候","提莫", 	HERO_TEEMO,
	"Thresh","魂锁典狱长","锤石", 	HERO_THRESH,
	"Tristana","麦林炮手","崔丝塔娜", 	HERO_TRISTANA,
	"Trundle","诅咒巨魔","特朗德尔", 	HERO_TRUNDLE,
	"Tryndamere","蛮族之王","泰达米尔", 	HERO_TRYNDAMERE,
	"TwistedFate","卡牌大师","崔斯特", 	HERO_TWISTEDFATE,
	"Twitch","瘟疫之源","图奇", 	HERO_TWITCH,
	"Udyr","野兽之灵","乌迪尔", 	HERO_UDYR,
	"Urgot","首领之傲","厄加特", 	HERO_URGOT,
	"Varus","惩戒之箭","韦鲁斯", 	HERO_VARUS,
	"Vayne","暗夜猎手","薇恩", 	HERO_VAYNE,
	"Veigar","邪恶小法师","维迦", 	HERO_VEIGAR,
	"Velkoz","虚空之眼","维克兹", 	HERO_VELKOZ,
	"Viktor","机械先驱","维克托", 	HERO_VIKTOR,
	"Vi","皮城执法官","蔚", 	HERO_VI,
	"Vladimir","猩红收割者","弗拉基米尔", 	HERO_VLADIMIR,
	"Volibear","雷霆咆哮","沃利贝尔", 	HERO_VOLIBEAR,
	"Warwick","嗜血猎手","沃里克", 	HERO_WARWICK,
	"Xerath","远古巫灵","泽拉斯", 	HERO_XERATH,
	"XinZhao","德邦总管","赵信", 	HERO_XINZHAO,
	"Yasuo","疾风剑豪","亚索", 	HERO_YASUO,
	"Yorick","掘墓者","约里克", 	HERO_YORICK,
	"Zac","生化魔人","扎克", 	HERO_ZAC,
	"Zed","影流之主","劫", 	HERO_ZED,
	"Ziggs","爆破鬼才","吉格斯", 	HERO_ZIGGS,
	"Zilean","时光守护者","基兰", 	HERO_ZILEAN,
	"Zyra","荆棘之兴","婕拉", 	HERO_ZYRA,
	"Kalista","复仇之矛","卡莉丝塔" ,HERO_KALISTA,
	"RekSai","虚空遁地兽","雷克塞", HERO_REKSAI,
	"Bard","星界游神","巴德",HERO_BARD,
	"Ekko","时间刺客","艾克",HERO_EKKO,
	"",0
};

std::string GetHeroNameByID( unsigned int ID )
{
	std::string  szResult="未知英雄";
	unsigned int Index=0;
	while(1)
	{
		LOLHERO pHero=stLOLHeroData[Index];
		if (pHero.ID==0)
		{
			break;
		}

		if (ID==stLOLHeroData[Index].ID)
		{
			szResult=stLOLHeroData[Index].szEN;
			break;
		}
		Index++;
	}
	return szResult;
}

unsigned int GetIDByEnName(std::string str)
{
	unsigned int iResult=0;
	unsigned int Index=0;
	while(1)
	{
		LOLHERO pHero=stLOLHeroData[Index];
		if (pHero.ID==0)
		{
			break;
		}
		
		if (str.compare(stLOLHeroData[Index].szEN)==0) 
		{
			iResult=stLOLHeroData[Index].ID;
			break;
		}
		Index++;
	}
	return iResult;
}



std::string GetRankName(std::string szENName )
{
	std::string  szResult="未知段位";
	unsigned int Index=0;
	while(1)
	{
		if (stLOLRankData[Index].szEN=="")
		{
			break;
		}
		if (szENName==stLOLRankData[Index].szEN)
		{
			szResult=stLOLRankData[Index].szCN;
			break;
		}
		Index++;
	}
	return szResult;
}

std::string GetCN1ByEN( std::string strEnName )
{
	std::string  strResult;
	unsigned int Index=0;
	while(1)
	{
		LOLHERO pHero=stLOLHeroData[Index];
		if (pHero.ID==0)
		{
			break;
		}

		if (strEnName.compare(stLOLHeroData[Index].szEN)==0) 
		{
			strResult=stLOLHeroData[Index].szCN;
			break;
		}
		Index++;
	}
	return strResult;
}

std::string GetCN2ByEN( std::string strEnName )
{
	std::string  strResult;
	unsigned int Index=0;
	while(1)
	{
		LOLHERO pHero=stLOLHeroData[Index];
		if (pHero.ID==0)
		{
			break;
		}

		if (strEnName.compare(stLOLHeroData[Index].szEN)==0) 
		{
			strResult=stLOLHeroData[Index].szCNName;
			break;
		}
		Index++;
	}
	return strResult;
}

std::string GetENByCN( std::string strCnName )
{
	std::string  strResult;
	unsigned int Index=0;
	while(1)
	{
		LOLHERO pHero=stLOLHeroData[Index];
		if (pHero.ID==0)
		{
			break;
		}

		if (strCnName.compare(stLOLHeroData[Index].szCN)==0) 
		{
			strResult=stLOLHeroData[Index].szEN;
			break;
		}

		if (strCnName.compare(stLOLHeroData[Index].szCNName)==0) 
		{
			strResult=stLOLHeroData[Index].szEN;
			break;
		}
		Index++;
	}
	return strResult;
}

LOLHERO GetENByIndex( unsigned int SearchIndex )
{
	LOLHERO result={0};
	int Index=0;
	while(1)
	{
		LOLHERO pHero=stLOLHeroData[Index];
		if (pHero.ID==0)
		{
			break;
		}

		if (Index==SearchIndex)
		{
			result=stLOLHeroData[Index];
			break;
		}
		Index++;
	}
	
	return result;
}
